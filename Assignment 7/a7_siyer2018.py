# -*- coding: utf-8 -*-
"""vpersaud_a7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lp4qqZVNzQfGCqX1lm5bwrRNc8VoYb_D

Group Members: Verneshia Persaud, Sharmada Iyer  
COP 4045 Python Programming  
Dr. Oge Marques  
Summer 2021  
Assignment 7: Color Addition and Subtraction
"""

# -*- coding: utf-8 -*-
"""vpersaud_a7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lp4qqZVNzQfGCqX1lm5bwrRNc8VoYb_D

Group Members: Verneshia Persaud, Sharmada Iyer  
COP 4045 Python Programming  
Dr. Oge Marques  
Summer 2021  
Assignment 7: Color Addition and Subtraction
"""

class Color(object):
    # default constructor
    def __init__(self,r,g,b):
        # coerce values into required range by saturating
        if r < 0: r = 0
        elif r > 1: r = 1
        self.red = float(r)
        if g < 0: g = 0
        elif g > 1: g = 1        
        self.green = float(g)
        if b < 0: b = 0
        elif b > 1: b = 1  
        self.blue = float(b)

    # overloaded addition operator, returns sum of two Color objects
    def __add__(self,x):
        return Color(self.red + x.red, self.green + x.green, self.blue + x.blue)

    # overloaded subtraction operator, returns difference of two Color objects
    def __sub__(self,x):
        return Color(self.red - x.red, self.green - x.green, self.blue - x.blue)
    
    # converts Color object to a tuple to allow comparison with color_dict values
    def make_tuple(self):
        color_list = self.__str__().strip("()").split(", ")
        color_list = [float(x) for x in color_list]
        return tuple(color_list)

    # converts Color object to a readable string 
    def __str__(self):
        return "({:.1f}, {:.1f}, {:.1f})".format(self.red, self.green, self.blue)

    # prints the string returned by __str__() 
    def __repr__(self):
        return self.__str__()

color_dict = {
    "red":      (1.0, 0.0, 0.0),
    "green":    (0.0, 1.0, 0.0),
    "blue":     (0.0, 0.0, 1.0),  
    "magenta":  (1.0, 0.0, 1.0),  
    "cyan":     (0.0, 1.0, 1.0),
    "yellow":   (1.0, 1.0, 0.0),
    "white":    (1.0, 1.0, 1.0),
    "black":    (0.0, 0.0, 0.0)
}

yn = "Y"
print("This program performs addition and subtraction between two colors.")
while yn == "Y":
    # prompt user for two colors, allow option to enter color names or color codes
    color_type = input("\nEnter color by name (N) or by color code (C)? ").upper()
    if color_type == "N" or color_type == "C":
        if color_type == "N":
            # prompt user for color by name
            color1_name = input("\nEnter color 1: ").lower()
            color2_name = input("Enter color 2: ").lower()
            not_found = 0
            # search color_dict for user entries
            if color1_name in color_dict and color2_name in color_dict:
                # print(f"{color1_str} and {color2_str} found")
                # get tuples and r, g, b values
                color1_tup = color_dict[color1_name]
                color2_tup = color_dict[color2_name]
                r1, g1, b1 = color1_tup
                r2, g2, b2 = color2_tup
            else:
                if color1_name not in color_dict:
                    print(f"\n{color1_name} not found.")
                    not_found = 1
                if color2_name not in color_dict:
                    print(f"\n{color2_name} not found.")
                    not_found = 1
        elif color_type =="C":
            not_found = 0
            # prompt user for color codes 

            # mehthod 1 allows user to enter R, G, and B values separately     
            # print("\nEnter color 1:")
            # r1 = float(input("Enter R value: "))
            # g1 = float(input("Enter G value: "))
            # b1 = float(input("Enter B value: "))
            # print("\nEnter color 2:")
            # r2 = float(input("Enter R value: "))
            # g2 = float(input("Enter G value: "))
            # b2 = float(input("Enter B value: "))
            
            # method 2 requires user to enter color code in the format (R, G, B)
            print("\nNote: Color code must be entered in the format ([r value], [g value], [b value])")
            color1_code = input("\nEnter color 1: ")
            color2_code = input("Enter color 2: ")
            color1_list = color1_code.strip("()").split(", ")
            color2_list = color2_code.strip("()").split(", ")
            r1, g1, b1 = float(color1_list[0]), float(color1_list[1]), float(color1_list[2])
            r2, g2, b2 = float(color2_list[0]), float(color2_list[1]), float(color2_list[2])  

        # create color objects
        if not_found != 1:
            color1_obj = Color(r1,g1,b1)
            color2_obj = Color(r2,g2,b2)
            # addition
            color_sum_obj = color1_obj + color2_obj
            # subtraction
            color_diff_obj = color1_obj - color2_obj
            # search color_dict for keys that match results, then display results
            color_sum_tup = color_sum_obj.make_tuple()
            color_diff_tup = color_diff_obj.make_tuple()      
            for name, color_code in color_dict.items():
                if color_sum_tup == color_code:
                    color_sum_name = name
                    break
                else:
                    color_sum_name = "NA"
            for name, color_code in color_dict.items():
                if color_diff_tup == color_code:
                    color_diff_name = name 
                    break                
                else:
                    color_diff_name = "NA"             
            if color_sum_name in color_dict:
                print(f"\nColor 1 + Color 2 = {color_sum_name}")
            else: 
                print(f"\nColor 1 + Color 2 = {color_sum_obj}")
            if color_diff_name in color_dict:
                print(f"Color 1 - Color 2 = {color_diff_name}")
            else:
                print(f"Color 1 - Color 2 = {color_diff_obj}")            
    else:
        print("\nInvalid entry.")  
    yn = input("\nContinue with new colors? Yes (Y) or No (N): ").upper()
    while yn != "Y" and yn != "N":
        yn = input("\nContinue with new colors? Yes (Y) or No (N): ").upper()
    if yn == "N":
        break
print("\nGoodbye!\n")